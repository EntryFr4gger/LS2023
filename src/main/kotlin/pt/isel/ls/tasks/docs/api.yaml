openapi: 3.0.1
info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:9000/
paths:
  /users:
    post:
      tags:
        - User
      summary: adds a user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                  - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: { }
      x-codegen-request-body-name: user
  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get a user given its id
      description: Get a user given its id
      operationId: getUserInfo
      security:
        - bearerAuth: [ ]
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: ID of user that to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid ID supplied
        404:
          description: Board not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: Board Not found
  /board:
    post:
      tags:
        - Board
      summary: Create a Board
      description: Create a new board in the system
      operationId: createBoard
      security:
        - bearerAuth: [ ]
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Board to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBoard'
        required: false
      responses:
        201:
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewBoardCreated'
        400:
          description: Invalid input, object invalid
          content: { }
  /board/{board_id}:
    get:
      tags:
        - Board
      summary: Get a board given its id
      description: Get a board given its id
      operationId: getBoardInfo
      security:
        - bearerAuth: [ ]
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            format: uuid
        - name: board_id
          in: path
          description: ID of board that to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        400:
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid ID supplied
        404:
          description: Board not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: Board Not found
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    Board:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Study HTTP
        description:
          type: string
          example: Board description
    NewBoard:
      required:
        - name
        - description
      type: object
      properties:
        title:
          type: string
          example: Study Http
        description:
          type: string
          example: Board description
    NewUser:
      required:
        - Name
        - Email
      type: object
      properties:
        Name:
          type: string
          example: Mario
        Email:
          type: string
          example: mariocard@gmail.com
    User:
      required:
        - Name
        - Email
      type: object
      properties:
        Name:
          type: string
          example: Mario
        Email:
          type: string
          example: mariocard@gmail.com

    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    NewBoardCreated:
      required:
        - status
        - board
      type: object
      properties:
        status:
          type: string
          example: board with id 123 created with success
        board:
          $ref: '#/components/schemas/Board'
